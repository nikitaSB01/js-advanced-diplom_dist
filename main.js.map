{"version":3,"file":"main.js","mappings":"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","sources":["webpack://js-advanced-diplom/./src/js/utils.js","webpack://js-advanced-diplom/./src/js/GamePlay.js","webpack://js-advanced-diplom/./src/js/themes.js","webpack://js-advanced-diplom/./src/js/Character.js","webpack://js-advanced-diplom/./src/js/PositionedCharacter.js","webpack://js-advanced-diplom/./src/js/characters/Bowman.js","webpack://js-advanced-diplom/./src/js/characters/Swordsman.js","webpack://js-advanced-diplom/./src/js/characters/Magician.js","webpack://js-advanced-diplom/./src/js/characters/Vampire.js","webpack://js-advanced-diplom/./src/js/characters/Daemon.js","webpack://js-advanced-diplom/./src/js/characters/Undead.js","webpack://js-advanced-diplom/./src/js/Team.js","webpack://js-advanced-diplom/./src/js/GameState.js","webpack://js-advanced-diplom/./src/js/generators.js","webpack://js-advanced-diplom/./src/js/attackOrMove.js","webpack://js-advanced-diplom/./src/js/app.js","webpack://js-advanced-diplom/./src/js/GameStateService.js","webpack://js-advanced-diplom/./src/js/GameController.js"],"sourcesContent":["/**\r\n * @todo\r\n * @param index - индекс поля\r\n * @param boardSize - размер квадратного поля (в длину или ширину)\r\n * @returns строка - тип ячейки на поле:\r\n *\r\n * top-left\r\n * top-right\r\n * top\r\n * bottom-left\r\n * bottom-right\r\n * bottom\r\n * right\r\n * left\r\n * center\r\n *\r\n * @example\r\n * ```js\r\n * calcTileType(0, 8); // 'top-left'\r\n * calcTileType(1, 8); // 'top'\r\n * calcTileType(63, 8); // 'bottom-right'\r\n * calcTileType(7, 7); // 'left'\r\n * ```\r\n * */\r\nexport function calcTileType(index, boardSize) {\r\n  const firstRow = index < boardSize;\r\n  const lastRow = index >= boardSize * (boardSize - 1);\r\n  const leftColumn = index % boardSize === 0;\r\n  const rightColumn = index % boardSize === boardSize - 1;\r\n\r\n  const positions = {\r\n    'top-left': firstRow && leftColumn,\r\n    'top-right': firstRow && rightColumn,\r\n    'bottom-left': lastRow && leftColumn,\r\n    'bottom-right': lastRow && rightColumn,\r\n    top: firstRow && !(leftColumn || rightColumn),\r\n    bottom: lastRow && !(leftColumn || rightColumn),\r\n    left: leftColumn && !(firstRow || lastRow),\r\n    right: rightColumn && !(firstRow || lastRow),\r\n  };\r\n  for (const position in positions) {\r\n    if (positions[position]) {\r\n      return position;\r\n    }\r\n  }\r\n\r\n  return 'center';\r\n}\r\n\r\nexport function calcHealthLevel(health) {\r\n  if (health < 15) {\r\n    return 'critical';\r\n  }\r\n\r\n  if (health < 50) {\r\n    return 'normal';\r\n  }\r\n\r\n  return 'high';\r\n}\r\n","import { calcHealthLevel, calcTileType } from './utils';\r\n\r\nexport default class GamePlay {\r\n  constructor() {\r\n    this.boardSize = 8;\r\n    this.container = null;\r\n    this.boardEl = null;\r\n    this.cells = [];\r\n    this.cellClickListeners = [];\r\n    this.cellEnterListeners = [];\r\n    this.cellLeaveListeners = [];\r\n    this.newGameListeners = [];\r\n    this.saveGameListeners = [];\r\n    this.loadGameListeners = [];\r\n  }\r\n\r\n  bindToDOM(container) {\r\n    if (!(container instanceof HTMLElement)) {\r\n      throw new Error('container is not HTMLElement');\r\n    }\r\n    this.container = container;\r\n  }\r\n\r\n  /**\r\n   * Draws boardEl with specific theme\r\n   *\r\n   * @param theme\r\n   */\r\n  drawUi(theme) {\r\n    this.checkBinding();\r\n\r\n    this.container.innerHTML = `\r\n      <div class=\"controls\">\r\n        <button data-id=\"action-restart\" class=\"btn\">New Game</button>\r\n        <button data-id=\"action-save\" class=\"btn\">Save Game</button>\r\n        <button data-id=\"action-load\" class=\"btn\">Load Game</button>\r\n      </div>\r\n      <div class=\"board-container\">\r\n        <div data-id=\"board\" class=\"board\"></div>\r\n      </div>\r\n    `;\r\n\r\n    this.newGameEl = this.container.querySelector('[data-id=action-restart]');\r\n    this.saveGameEl = this.container.querySelector('[data-id=action-save]');\r\n    this.loadGameEl = this.container.querySelector('[data-id=action-load]');\r\n\r\n    this.newGameEl.addEventListener('click', (event) => this.onNewGameClick(event));\r\n    this.saveGameEl.addEventListener('click', (event) => this.onSaveGameClick(event));\r\n    this.loadGameEl.addEventListener('click', (event) => this.onLoadGameClick(event));\r\n\r\n    this.boardEl = this.container.querySelector('[data-id=board]');\r\n\r\n    this.boardEl.classList.add(theme);\r\n    for (let i = 0; i < this.boardSize ** 2; i += 1) {\r\n      const cellEl = document.createElement('div');\r\n      cellEl.classList.add('cell', 'map-tile', `map-tile-${calcTileType(i, this.boardSize)}`);\r\n      cellEl.addEventListener('mouseenter', (event) => this.onCellEnter(event));\r\n      cellEl.addEventListener('mouseleave', (event) => this.onCellLeave(event));\r\n      cellEl.addEventListener('click', (event) => this.onCellClick(event));\r\n      this.boardEl.appendChild(cellEl);\r\n    }\r\n\r\n    this.cells = Array.from(this.boardEl.children);\r\n  }\r\n\r\n  /**\r\n   * Draws positions (with chars) on boardEl\r\n   *\r\n   * @param positions array of PositionedCharacter objects\r\n   */\r\n  redrawPositions(positions) {\r\n    for (const cell of this.cells) {\r\n      cell.innerHTML = '';\r\n    }\r\n\r\n    for (const position of positions) {\r\n      const cellEl = this.boardEl.children[position.position];\r\n      const charEl = document.createElement('div');\r\n      charEl.classList.add('character', position.character.type);\r\n\r\n      const healthEl = document.createElement('div');\r\n      healthEl.classList.add('health-level');\r\n\r\n      const healthIndicatorEl = document.createElement('div');\r\n      healthIndicatorEl.classList.add('health-level-indicator', `health-level-indicator-${calcHealthLevel(position.character.health)}`);\r\n      healthIndicatorEl.style.width = `${position.character.health}%`;\r\n      healthEl.appendChild(healthIndicatorEl);\r\n\r\n      charEl.appendChild(healthEl);\r\n      cellEl.appendChild(charEl);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add listener to mouse enter for cell\r\n   *\r\n   * @param callback\r\n   */\r\n  addCellEnterListener(callback) {\r\n    this.cellEnterListeners.push(callback);\r\n  }\r\n\r\n  /**\r\n   * Add listener to mouse leave for cell\r\n   *\r\n   * @param callback\r\n   */\r\n  addCellLeaveListener(callback) {\r\n    this.cellLeaveListeners.push(callback);\r\n  }\r\n\r\n  /**\r\n   * Add listener to mouse click for cell\r\n   *\r\n   * @param callback\r\n   */\r\n  addCellClickListener(callback) {\r\n    this.cellClickListeners.push(callback);\r\n  }\r\n\r\n  /**\r\n   * Add listener to \"New Game\" button click\r\n   *\r\n   * @param callback\r\n   */\r\n  addNewGameListener(callback) {\r\n    this.newGameListeners.push(callback);\r\n  }\r\n\r\n  /**\r\n   * Add listener to \"Save Game\" button click\r\n   *\r\n   * @param callback\r\n   */\r\n  addSaveGameListener(callback) {\r\n    this.saveGameListeners.push(callback);\r\n  }\r\n\r\n  /**\r\n   * Add listener to \"Load Game\" button click\r\n   *\r\n   * @param callback\r\n   */\r\n  addLoadGameListener(callback) {\r\n    this.loadGameListeners.push(callback);\r\n  }\r\n\r\n  onCellEnter(event) {\r\n    event.preventDefault();\r\n    const index = this.cells.indexOf(event.currentTarget);\r\n    this.cellEnterListeners.forEach((o) => o.call(null, index));\r\n  }\r\n\r\n  onCellLeave(event) {\r\n    event.preventDefault();\r\n    const index = this.cells.indexOf(event.currentTarget);\r\n    this.cellLeaveListeners.forEach((o) => o.call(null, index));\r\n  }\r\n\r\n  onCellClick(event) {\r\n    const index = this.cells.indexOf(event.currentTarget);\r\n    this.cellClickListeners.forEach((o) => o.call(null, index));\r\n  }\r\n\r\n  onNewGameClick(event) {\r\n    event.preventDefault();\r\n    this.newGameListeners.forEach((o) => o.call(null));\r\n  }\r\n\r\n  onSaveGameClick(event) {\r\n    event.preventDefault();\r\n    this.saveGameListeners.forEach((o) => o.call(null));\r\n  }\r\n\r\n  onLoadGameClick(event) {\r\n    event.preventDefault();\r\n    this.loadGameListeners.forEach((o) => o.call(null));\r\n  }\r\n\r\n  static showError(message) {\r\n    alert(message);\r\n  }\r\n\r\n  static showMessage(message) {\r\n    alert(message);\r\n  }\r\n\r\n  selectCell(index, color = 'yellow') {\r\n    this.deselectCell(index);\r\n    this.cells[index].classList.add('selected', `selected-${color}`);\r\n  }\r\n\r\n  deselectCell(index) {\r\n    const cell = this.cells[index];\r\n    cell.classList.remove(...Array.from(cell.classList)\r\n      .filter((o) => o.startsWith('selected')));\r\n  }\r\n\r\n  showCellTooltip(message, index) {\r\n    this.cells[index].title = message;\r\n  }\r\n\r\n  hideCellTooltip(index) {\r\n    this.cells[index].title = '';\r\n  }\r\n\r\n  showDamage(index, damage) {\r\n    return new Promise((resolve) => {\r\n      const cell = this.cells[index];\r\n      const damageEl = document.createElement('span');\r\n      damageEl.textContent = damage;\r\n      damageEl.classList.add('damage');\r\n      cell.appendChild(damageEl);\r\n\r\n      damageEl.addEventListener('animationend', () => {\r\n        cell.removeChild(damageEl);\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  setCursor(cursor) {\r\n    this.boardEl.style.cursor = cursor;\r\n  }\r\n\r\n  checkBinding() {\r\n    if (this.container === null) {\r\n      throw new Error('GamePlay not bind to DOM');\r\n    }\r\n  }\r\n}\r\n","const themes = {\r\n  prairie: 'prairie',\r\n  desert: 'desert',\r\n  arctic: 'arctic',\r\n  mountain: 'mountain',\r\n};\r\n\r\nexport default themes;\r\n","/**\r\n * Базовый класс, от которого наследуются классы персонажей\r\n * @property level - уровень персонажа, от 1 до 4\r\n * @property attack - показатель атаки\r\n * @property defence - показатель защиты\r\n * @property health - здоровье персонажа\r\n * @property type - строка с одним из допустимых значений:\r\n * swordsman\r\n * bowman\r\n * magician\r\n * daemon\r\n * undead\r\n * vampire\r\n */\r\nexport default class Character {\r\n  constructor(level, type = 'generic') {\r\n    this.level = level;\r\n    this.attack = 0;\r\n    this.defence = 0;\r\n    this.health = 50;\r\n    this.type = type;\r\n    // TODO: выбросите исключение, если кто-то использует \"new Character()\"\r\n    if (new.target.name === 'Character') {\r\n      throw new Error('Нельзя создать данный класс');\r\n    }\r\n  }\r\n}\r\n","import Character from './Character';\r\n\r\nexport default class PositionedCharacter {\r\n  constructor(character, position) {\r\n    if (!(character instanceof Character)) {\r\n      throw new Error('character must be instance of Character or its children');\r\n    }\r\n\r\n    if (typeof position !== 'number') {\r\n      throw new Error('position must be a number');\r\n    }\r\n\r\n    this.character = character;\r\n    this.position = position;\r\n  }\r\n}\r\n","import Character from '../Character';\r\n\r\nexport default class Bowman extends Character {\r\n  constructor(level, type = 'bowman') {\r\n    super(level, type);\r\n    this.attack = 25;\r\n    this.defence = 25;\r\n  }\r\n}\r\n","import Character from '../Character';\r\n\r\nexport default class Swordsman extends Character {\r\n  constructor(level, type = 'swordsman') {\r\n    super(level, type);\r\n    this.attack = 40;\r\n    this.defence = 10;\r\n  }\r\n}\r\n","import Character from '../Character';\r\n\r\nexport default class Magician extends Character {\r\n  constructor(level, type = 'magician') {\r\n    super(level, type);\r\n    this.attack = 10;\r\n    this.defence = 40;\r\n  }\r\n}\r\n","import Character from '../Character';\r\n\r\nexport default class Vampire extends Character {\r\n  constructor(level, type = 'vampire') {\r\n    super(level, type);\r\n    this.attack = 25;\r\n    this.defence = 25;\r\n  }\r\n}\r\n","import Character from '../Character';\r\n\r\nexport default class Daemon extends Character {\r\n  constructor(level, type = 'daemon') {\r\n    super(level, type);\r\n    this.attack = 10;\r\n    this.defence = 10;\r\n  }\r\n}\r\n","import Character from '../Character';\r\n\r\nexport default class Undead extends Character {\r\n  constructor(level, type = 'undead') {\r\n    super(level, type);\r\n    this.attack = 40;\r\n    this.defence = 10;\r\n  }\r\n}\r\n","/**\r\n * Класс, представляющий персонажей команды\r\n *\r\n * @todo Самостоятельно продумайте хранение персонажей в классе\r\n * Например\r\n * @example\r\n * ```js\r\n * const characters = [new Swordsman(2), new Bowman(1)]\r\n * const team = new Team(characters);\r\n *\r\n * team.characters // [swordsman, bowman]\r\n * ```\r\n * */\r\nexport default class Team {\r\n  // TODO: write your logic here\r\n  constructor(characters) {\r\n    this.characters = characters;\r\n  }\r\n\r\n  addCharacter(character) {\r\n    this.characters.push(character);\r\n  }\r\n}\r\n","import Bowman from './characters/Bowman';\r\nimport Swordsman from './characters/Swordsman';\r\nimport Magician from './characters/Magician';\r\nimport Vampire from './characters/Vampire';\r\nimport Daemon from './characters/Daemon';\r\nimport Undead from './characters/Undead';\r\nimport PositionedCharacter from './PositionedCharacter';\r\nimport Team from './Team';\r\n\r\nexport default class GameState {\r\n  static from(data) {\r\n    const types = {\r\n      swordsman: Swordsman,\r\n      bowman: Bowman,\r\n      magician: Magician,\r\n      daemon: Daemon,\r\n      undead: Undead,\r\n      vampire: Vampire,\r\n    };\r\n\r\n    const createCharacter = (characterData) => {\r\n      const CharacterClass = types[characterData.type];\r\n      if (!CharacterClass) {\r\n        throw new Error('Неизвестный тип');\r\n      }\r\n      const character = new CharacterClass(characterData.level);\r\n      character.health = characterData.health;\r\n      character.attack = characterData.attack;\r\n      character.defence = characterData.defence;\r\n      character.health = characterData.health;\r\n      character.type = characterData.type; return character;\r\n    };\r\n\r\n    const userTeam = new Team();\r\n    const positionsUser = data.positionsUser.map((positionCharacter) => {\r\n      const character = createCharacter(positionCharacter.character);\r\n      if (!Array.isArray(userTeam.characters)) {\r\n        userTeam.characters = [];\r\n      }\r\n      userTeam.addCharacter(character);\r\n      return new PositionedCharacter(character, positionCharacter.position);\r\n    });\r\n    // console.log('userTeam=>', userTeam);\r\n\r\n    const botTeam = new Team();\r\n    const positionsBot = data.positionsBot.map((positionCharacter) => {\r\n      const character = createCharacter(positionCharacter.character);\r\n      if (!Array.isArray(botTeam.characters)) {\r\n        botTeam.characters = [];\r\n      }\r\n      botTeam.addCharacter(character);\r\n      return new PositionedCharacter(character, positionCharacter.position);\r\n    });\r\n    // console.log('botTeam=>', botTeam);\r\n\r\n    const gameState = new GameState();\r\n\r\n    gameState.userTeam = userTeam;\r\n    gameState.botTeam = botTeam;\r\n    gameState.positionsUser = positionsUser;\r\n    gameState.positionsBot = positionsBot;\r\n    gameState.isPlayer = true;\r\n    gameState.level = data.level;\r\n    gameState.theme = data.theme;\r\n\r\n    return gameState;\r\n  }\r\n}\r\n","import Team from './Team';\r\n/**\r\n * Формирует экземпляр персонажа из массива allowedTypes со\r\n * случайным уровнем от 1 до maxLevel\r\n *\r\n * @param allowedTypes массив классов\r\n * @param maxLevel максимальный возможный уровень персонажа\r\n * @returns генератор, который при каждом вызове\r\n * возвращает новый экземпляр класса персонажа\r\n *\r\n */\r\nexport function* characterGenerator(allowedTypes, maxLevel) {\r\n  // TODO: write logic here\r\n  while (true) {\r\n    const randomLevel = Math.ceil(Math.random() * maxLevel);\r\n    const randomIndex = Math.floor(Math.random() * allowedTypes.length);\r\n    const char = new allowedTypes[randomIndex]();\r\n    char.level = randomLevel;\r\n    yield char;\r\n  }\r\n}\r\n\r\n/**\r\n * Формирует массив персонажей на основе characterGenerator\r\n * @param allowedTypes массив классов\r\n * @param maxLevel максимальный возможный уровень персонажа\r\n * @param characterCount количество персонажей, которое нужно сформировать\r\n * @returns экземпляр Team, хранящий экземпляры персонажей. Количество персонажей\r\n * в команде - characterCount\r\n * */\r\nexport function generateTeam(allowedTypes, maxLevel, characterCount) {\r\n  // TODO: write logic here\r\n  const generTeam = characterGenerator(allowedTypes, maxLevel);\r\n  const team = [];\r\n  for (let i = 0; i < characterCount; i += 1) {\r\n    const generChar = generTeam.next().value;\r\n    team.push(generChar);\r\n  }\r\n  return new Team(team);\r\n}\r\n","/* eslint-disable max-len */\r\n\r\nexport default function canMoveOrAttack(charType, currentPos, targetPos, fieldSize, actionType) {\r\n  const rowDiff = Math.abs(Math.floor(currentPos / fieldSize) - Math.floor(targetPos / fieldSize));\r\n  const colDiff = Math.abs((currentPos % fieldSize) - (targetPos % fieldSize));\r\n\r\n  // Проверка допустимости действия (перемещение или атака)\r\n  if (actionType === 'move') {\r\n    let maxMovDist;\r\n    switch (charType) {\r\n      case 'swordsman':\r\n      case 'undead':\r\n        maxMovDist = 4;\r\n        break;\r\n      case 'bowman':\r\n      case 'vampire':\r\n        maxMovDist = 2;\r\n        break;\r\n      case 'magician':\r\n      case 'daemon':\r\n        maxMovDist = 1;\r\n        break;\r\n      default:\r\n        console.log('Выбран неверный тип игрока');\r\n        return false;\r\n    }\r\n    return rowDiff <= maxMovDist && colDiff <= maxMovDist && (rowDiff === 0 || colDiff === 0 || rowDiff === colDiff);\r\n  } if (actionType === 'attack') {\r\n    let maxAttackRadius;\r\n    switch (charType) {\r\n      case 'swordsman':\r\n      case 'undead':\r\n        maxAttackRadius = 1;\r\n        break;\r\n      case 'bowman':\r\n      case 'vampire':\r\n        maxAttackRadius = 2;\r\n        break;\r\n      case 'magician':\r\n      case 'daemon':\r\n        maxAttackRadius = 4;\r\n        break;\r\n      default:\r\n        console.log('Выбран неверный тип злыдня');\r\n        return false;\r\n    }\r\n\r\n    // Проверка на радиус атаки в квадратном поле\r\n    return rowDiff <= maxAttackRadius && colDiff <= maxAttackRadius;\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * Entry point of app: don't change this\r\n */\r\nimport GamePlay from './GamePlay';\r\nimport GameController from './GameController';\r\nimport GameStateService from './GameStateService';\r\n\r\nconst gamePlay = new GamePlay();\r\ngamePlay.bindToDOM(document.querySelector('#game-container'));\r\n\r\nconst stateService = new GameStateService(localStorage);\r\n\r\nconst gameCtrl = new GameController(gamePlay, stateService);\r\ngameCtrl.init();\r\n\r\n// don't write your code here\r\n","export default class GameStateService {\r\n  constructor(storage) {\r\n    this.storage = storage;\r\n  }\r\n\r\n  save(state) {\r\n    this.storage.setItem('state', JSON.stringify(state));\r\n  }\r\n\r\n  load() {\r\n    try {\r\n      return JSON.parse(this.storage.getItem('state'));\r\n    } catch (e) {\r\n      throw new Error('Invalid state');\r\n    }\r\n  }\r\n}\r\n","import GamePlay from './GamePlay';\r\nimport themes from './themes';\r\nimport PositionedCharacter from './PositionedCharacter';\r\nimport Bowman from './characters/Bowman';\r\nimport Swordsman from './characters/Swordsman';\r\nimport Magician from './characters/Magician';\r\nimport Vampire from './characters/Vampire';\r\nimport Daemon from './characters/Daemon';\r\nimport Undead from './characters/Undead';\r\nimport GameState from './GameState';\r\nimport { generateTeam } from './generators';\r\nimport canMoveOrAttack from './attackOrMove';\r\n\r\nexport default class GameController {\r\n  constructor(gamePlay, stateService) {\r\n    this.gamePlay = gamePlay;\r\n    this.stateService = stateService;\r\n    this.fieldSize = this.gamePlay.boardSize;\r\n    this.gameOver = false; // Флаг для отслеживания завершения игры\r\n    // Инициализация массива для хранения позиций врагов\r\n\r\n    this.onCellClick = this.onCellClick.bind(this);\r\n    this.onCellEnter = this.onCellEnter.bind(this);\r\n    this.onCellLeave = this.onCellLeave.bind(this);\r\n\r\n    this.addEvents();\r\n  }\r\n\r\n  init() {\r\n    this.theme = themes.prairie;\r\n    this.level = 1;\r\n    this.gamePlay.drawUi(this.theme);\r\n    // Создаем позиции для игрока и врагов\r\n    this.playerPositions = this.generatePositions('playerTeam');\r\n    this.enemyPositions = this.generatePositions('enemyTeam');\r\n\r\n    this.playerTeam = generateTeam(\r\n      [Bowman, Swordsman, Magician],\r\n      this.level,\r\n      3,\r\n    );\r\n    this.positionedPlayerTeam = this.createPositionedTeam(\r\n      this.playerTeam,\r\n      this.playerPositions,\r\n    );\r\n\r\n    this.enemyTeam = generateTeam([Vampire, Undead, Daemon], this.level, 1);\r\n    this.positionedEnemyTeam = this.createPositionedTeam(\r\n      this.enemyTeam,\r\n      this.enemyPositions,\r\n    ); this.allChars = [...this.positionedPlayerTeam, ...this.positionedEnemyTeam];\r\n\r\n    this.gamePlay.redrawPositions(this.allChars);\r\n    this.gameState = {\r\n      positionsUser: this.positionedPlayerTeam,\r\n      positionsBot: this.positionedEnemyTeam,\r\n      isPlayer: true,\r\n      level: this.level,\r\n      theme: this.theme,\r\n    };\r\n    console.log('Initialized state:', this.state); // Выводим инициализированное состояние в консоль\r\n  }\r\n\r\n  generatePositions(string) {\r\n    const positions = [];\r\n    for (let i = 0; i < this.fieldSize ** 2; i += 1) {\r\n      const position = i % this.fieldSize;\r\n\r\n      if (string === 'playerTeam' && position <= 1) {\r\n        positions.push(i);\r\n      }\r\n\r\n      if (string === 'enemyTeam' && position >= this.fieldSize - 2) {\r\n        positions.push(i);\r\n      }\r\n    }\r\n    return positions;\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  createPositionedTeam(team, positions) {\r\n    const positionedTeam = [];\r\n\r\n    team.characters.forEach((char) => {\r\n      const randomIndex = Math.floor(Math.random() * positions.length);\r\n      const position = positions[randomIndex];\r\n      const positionedCharacter = new PositionedCharacter(char, position);\r\n      positionedTeam.push(positionedCharacter);\r\n      positions.splice(randomIndex, 1);\r\n    });\r\n\r\n    return positionedTeam;\r\n  }\r\n\r\n  addEvents() {\r\n    this.gamePlay.addCellEnterListener(this.onCellEnter);\r\n    this.gamePlay.addCellClickListener(this.onCellClick);\r\n    this.gamePlay.addCellLeaveListener(this.onCellLeave);\r\n\r\n    this.gamePlay.addNewGameListener(() => this.newGame());\r\n    this.gamePlay.addSaveGameListener(() => this.saveGame());\r\n    this.gamePlay.addLoadGameListener(() => this.loadGame());\r\n  }\r\n\r\n  // Проверяет, является ли кликнутый персонаж персонажем игрока\r\n  // eslint-disable-next-line class-methods-use-this\r\n  checkPlayerChar(char) {\r\n    if (!char) {\r\n      return console.log('Character is missing');\r\n    }\r\n\r\n    const playerChar = char.character.type;\r\n    return (\r\n      playerChar === 'bowman'\r\n      || playerChar === 'swordsman'\r\n      || playerChar === 'magician'\r\n    );\r\n  }\r\n\r\n  // Расчет урона\r\n  // eslint-disable-next-line class-methods-use-this\r\n  calcDamage(attacker, target) {\r\n    const attackerAttack = attacker.character.attack;\r\n    const targetDefence = target.character.defence;\r\n    const damageDiff = attackerAttack - targetDefence;\r\n    const damage = Math.max(damageDiff, attackerAttack * 0.1);\r\n\r\n    return Math.floor(damage);\r\n  }\r\n\r\n  onCellClick(index) {\r\n    if (this.gameOver) return;\r\n    const cellWithChar = this.gamePlay.cells[index].querySelector('.character');\r\n    this.clickedChar = this.allChars.find((char) => char.position === index);\r\n\r\n    // Перемещаем персонажа\r\n    if (this.enteredCell.classList.contains('selected-green')) {\r\n      this.playerStep(index);\r\n      return;\r\n    }\r\n\r\n    // Атакуем противника\r\n    if (this.enteredCell.classList.contains('selected-red')) {\r\n      this.playerAttack(index);\r\n      return;\r\n    }\r\n\r\n    const isPlayerChar = this.checkPlayerChar(this.clickedChar);\r\n\r\n    if (cellWithChar && isPlayerChar) {\r\n      this.gamePlay.cells.forEach((cell, i) => this.gamePlay.deselectCell(i));\r\n      this.gamePlay.selectCell(index);\r\n      this.activeChar = this.clickedChar;\r\n      this.activeIndex = index;\r\n    } else {\r\n      GamePlay.showMessage(\r\n        'Вы не выбрали персонажа или делаете недоступный Вам ход',\r\n      );\r\n      this.gamePlay.cells.forEach((cell, i) => this.gamePlay.deselectCell(i));\r\n      this.clickedChar = null;\r\n    }\r\n  }\r\n\r\n  // Перемещение игрока\r\n  playerStep(index) {\r\n    console.log('запуск playerStep');\r\n\r\n    this.activeChar.position = index;\r\n    this.gamePlay.redrawPositions(this.allChars);\r\n    this.gamePlay.cells.forEach((cell, i) => this.gamePlay.deselectCell(i));\r\n    this.clickedChar = null;\r\n    this.gameState.isPlayer = false;\r\n    this.compAct();\r\n  }\r\n\r\n  playerAttack(index) {\r\n    console.log('запуск playerAttack');\r\n\r\n    // Получаем информацию о цели атаки\r\n    const targetCharacter = this.allChars.find(\r\n      (char) => char.position === index,\r\n    );\r\n    // Рассчитываем урон\r\n    const damage = this.calcDamage(this.activeChar, targetCharacter);\r\n    // Отображаем анимацию урона\r\n    this.gamePlay.showDamage(index, damage).then(() => {\r\n      // Уменьшаем здоровье атакованного персонажа\r\n      targetCharacter.character.health -= damage;\r\n      // Проверяем условие победы\r\n      if (targetCharacter.character.health <= 0) {\r\n        // eslint-disable-next-line max-len\r\n        this.positionedEnemyTeam = this.positionedEnemyTeam.filter(\r\n          (char) => char !== targetCharacter,\r\n        );\r\n        this.allChars = [\r\n          ...this.positionedPlayerTeam,\r\n          ...this.positionedEnemyTeam,\r\n        ];\r\n\r\n        // Проверяем, остались ли еще враги\r\n        if (this.positionedEnemyTeam.length === 0) {\r\n          // Вызываем метод для перехода на следующий уровень или завершения игры\r\n          this.levelUp();\r\n          return;\r\n        }\r\n      }\r\n      // Перерисовываем полоску здоровья атакованного персонажа\r\n      this.gamePlay.redrawPositions(this.allChars);\r\n\r\n      this.gamePlay.cells.forEach((cell, i) => this.gamePlay.deselectCell(i));\r\n      this.clickedChar = null;\r\n      this.activeChar = null;\r\n      this.gameState.isPlayer = false;\r\n      // Переключаем ход компьютеру\r\n      this.compAct();\r\n    });\r\n  }\r\n\r\n  compAct() {\r\n    console.log('запуск compAct');\r\n\r\n    if (!this.gameState.isPlayer) {\r\n      // проверка ходит ли компьютерный игрок\r\n      let targetHero = null;\r\n      let targetEnemy = null;\r\n      let maxDamage = -Infinity;\r\n      const playerHeroes = this.positionedPlayerTeam.map(\r\n        (hero) => hero.position,\r\n      );\r\n\r\n      for (const enemy of this.positionedEnemyTeam) {\r\n        for (const playerHero of playerHeroes) {\r\n          if (\r\n            canMoveOrAttack(\r\n              enemy.character.type,\r\n              enemy.position,\r\n              playerHero,\r\n              this.fieldSize,\r\n              'attack',\r\n            )\r\n          ) {\r\n            const playerHeroCharacter = this.allChars.find(\r\n              (char) => char.position === playerHero,\r\n            );\r\n\r\n            const damage = this.calcDamage(enemy, playerHeroCharacter);\r\n\r\n            if (damage > maxDamage) {\r\n              maxDamage = damage;\r\n              targetHero = playerHero;\r\n              targetEnemy = enemy;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (targetHero !== null) {\r\n        this.enemyAttack(targetHero, targetEnemy);\r\n      } else if (!this.gameOver) {\r\n        this.moveRandomEnemy();\r\n      }\r\n    }\r\n  }\r\n\r\n  enemyAttack(targetHero, targetEnemy) {\r\n    console.log('запуск enemyAttack');\r\n\r\n    // Находим цель атаки (героя игрока) по индексу\r\n    const targetCharacter = this.allChars.find(\r\n      (char) => char.position === targetHero,\r\n    );\r\n    // Рассчитываем урон злодея по цели атаки\r\n    const damage = this.calcDamage(targetEnemy, targetCharacter);\r\n    // Отображаем анимацию урона на герое игрока\r\n    this.gamePlay.showDamage(targetHero, damage).then(() => {\r\n      // Уменьшаем здоровье героя игрока на рассчитанный урон\r\n      targetCharacter.character.health -= damage;\r\n      // Проверяем, если здоровье героя игрока достигло или упало ниже 0,\r\n      // удаляем его из команды игрока\r\n      if (targetCharacter.character.health <= 0) {\r\n        // eslint-disable-next-line max-len\r\n        this.positionedPlayerTeam = this.positionedPlayerTeam.filter(\r\n          (char) => char !== targetCharacter,\r\n        );\r\n        // Обновляем все персонажи, чтобы убрать убитого героя\r\n        this.allChars = [\r\n          ...this.positionedPlayerTeam,\r\n          ...this.positionedEnemyTeam,\r\n        ];\r\n        // Проверяем, остались ли еще враги\r\n        if (this.positionedPlayerTeam.length === 0) {\r\n          // Вызываем метод для перехода на следующий уровень или завершения игры\r\n          this.finishGame();\r\n          this.winOrOver('поражение');\r\n          return;\r\n        }\r\n      }\r\n      // Обновляем отображение полоски здоровья героя игрока\r\n      this.gamePlay.redrawPositions(this.allChars);\r\n      // Переключаем ход на игрока\r\n      this.gameState.isPlayer = true;\r\n    });\r\n  }\r\n\r\n  moveRandomEnemy() {\r\n    console.log('запуск moveRandomEnemy');\r\n\r\n    // Выбираем случайного врага\r\n    // eslint-disable-next-line max-len\r\n    const randomEnemy = this.positionedEnemyTeam[\r\n      Math.floor(Math.random() * this.positionedEnemyTeam.length)\r\n    ]; // Находим ближайшего к злодею героя\r\n    const nearestHero = this.findNearestHero(randomEnemy.position);\r\n    // Создаем массив всех доступных ячеек для перемещения\r\n    const availableCells = [];\r\n    for (let i = 0; i < this.fieldSize * this.fieldSize; i += 1) {\r\n      if (\r\n        canMoveOrAttack(\r\n          randomEnemy.character.type,\r\n          randomEnemy.position,\r\n          i,\r\n          this.fieldSize,\r\n          'move',\r\n        )\r\n      ) {\r\n        availableCells.push(i);\r\n      }\r\n    }\r\n    // Исключаем занятые ячейки из массива доступных ячеек\r\n    const occupiedCells = this.allChars.map((char) => char.position);\r\n    const unoccupiedCells = availableCells.filter(\r\n      (cell) => !occupiedCells.includes(cell),\r\n    );\r\n    // Находим доступную ячейку, которая находится ближе всего к герою\r\n    let minDistance = Infinity;\r\n    let nearestCell = null;\r\n    for (const cell of unoccupiedCells) {\r\n      const distance = this.calculateDistance(cell, nearestHero);\r\n      if (distance < minDistance) {\r\n        minDistance = distance;\r\n        nearestCell = cell;\r\n      }\r\n    }\r\n    // Перемещаем врага на выбранную ячейку\r\n    randomEnemy.position = nearestCell;\r\n    // Обновляем отображение персонажей\r\n    this.gamePlay.redrawPositions(this.allChars);\r\n  }\r\n\r\n  findNearestHero(position) {\r\n    let nearestHero = null;\r\n    let minDistance = Infinity;\r\n    for (const hero of this.positionedPlayerTeam) {\r\n      const distance = this.calculateDistance(position, hero.position);\r\n      if (distance < minDistance) {\r\n        minDistance = distance;\r\n        nearestHero = hero.position;\r\n      }\r\n    }\r\n    return nearestHero;\r\n  }\r\n\r\n  calculateDistance(pos1, pos2) {\r\n    const row1 = Math.floor(pos1 / this.fieldSize);\r\n    const col1 = pos1 % this.fieldSize;\r\n    const row2 = Math.floor(pos2 / this.fieldSize);\r\n    const col2 = pos2 % this.fieldSize;\r\n    return Math.abs(row1 - row2) + Math.abs(col1 - col2);\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  createMessage(char) {\r\n    return `\\u{1F396} ${char.level} \\u{2694} ${char.attack} \\u{1F6E1} ${char.defence} \\u{2764} ${char.health}`;\r\n  }\r\n\r\n  levelUp() {\r\n    console.log('---LEVEL UP---');\r\n    this.level += 1;\r\n\r\n    switch (this.level) {\r\n      case 2:\r\n        this.theme = themes.desert;\r\n        break;\r\n      case 3:\r\n        this.theme = themes.arctic;\r\n        break;\r\n      case 4:\r\n        this.theme = themes.mountain;\r\n        break;\r\n      case 5:\r\n        this.finishGame();\r\n        this.winOrOver('победа');\r\n        return;\r\n      default:\r\n        this.theme = themes.prairie;\r\n        break;\r\n    }\r\n\r\n    this.gamePlay.drawUi(this.theme);\r\n\r\n    for (const hero of this.positionedPlayerTeam) {\r\n      const { health, attack, defence } = hero.character;\r\n      hero.character.health = Math.floor(Math.min(health + 80, 100));\r\n      hero.character.attack = Math.floor(\r\n        Math.max(attack, (attack * (80 + health)) / 100),\r\n      );\r\n      hero.character.defence = Math.floor(\r\n        Math.max(defence, (defence * (80 + health)) / 100),\r\n      );\r\n      hero.character.level = this.level;\r\n    }\r\n\r\n    this.playerTeam.characters = this.playerTeam.characters.filter(\r\n      (char) => char.health > 0,\r\n    );\r\n    this.positionedPlayerTeam = this.createPositionedTeam(\r\n      this.playerTeam,\r\n      this.playerPositions,\r\n    );\r\n\r\n    this.enemyTeam = generateTeam([Vampire, Undead, Daemon], this.level, 1);\r\n    this.enemyPositions = this.generatePositions('enemyTeam'); // Обновляем массив позиций врагов\r\n    this.positionedEnemyTeam = this.createPositionedTeam(\r\n      this.enemyTeam,\r\n      this.enemyPositions,\r\n    );\r\n\r\n    for (const enemy of this.positionedEnemyTeam) {\r\n      if (enemy.character.level === this.level) {\r\n        const { health, attack, defence } = enemy.character;\r\n        enemy.character.health = 100;\r\n        enemy.character.attack = Math.floor(\r\n          Math.max(attack, (attack * (80 + health)) / 100),\r\n        );\r\n        enemy.character.defence = Math.floor(\r\n          Math.max(defence, (defence * (80 + health)) / 100),\r\n        );\r\n      }\r\n    }\r\n\r\n    this.allChars = [...this.positionedPlayerTeam, ...this.positionedEnemyTeam];\r\n    this.gamePlay.redrawPositions(this.allChars);\r\n    this.settingsDef();\r\n\r\n    this.gameState = {\r\n      positionsUser: this.positionedPlayerTeam,\r\n      positionsBot: this.positionedEnemyTeam,\r\n      isPlayer: true,\r\n      level: this.level,\r\n      theme: this.theme,\r\n    };\r\n  }\r\n\r\n  onCellEnter(index) {\r\n    if (this.gameOver) return;\r\n    const cellWithChar = this.gamePlay.cells[index].querySelector('.character');\r\n    this.enteredCell = this.gamePlay.cells[index];\r\n\r\n    // Проверяем, есть ли персонаж в наведенной клетке\r\n    if (cellWithChar) {\r\n      this.enteredChar = this.allChars.find((char) => char.position === index);\r\n      const message = this.createMessage(this.enteredChar.character);\r\n      this.gamePlay.showCellTooltip(message, index);\r\n      this.gamePlay.setCursor('pointer');\r\n    }\r\n    const selectedCell = this.gamePlay.cells[index].classList.contains('selected');\r\n    if (!selectedCell && !cellWithChar) {\r\n      this.gamePlay.setCursor('default');\r\n    }\r\n\r\n    // Если есть кликнутый персонаж при наведении им на другую клетку без персонажа,\r\n    // проверяем может ли туда походить персонаж, если да, то подсвечиваем зеленым кругом\r\n    if (this.clickedChar && !cellWithChar) {\r\n      const playerType = this.clickedChar.character.type;\r\n\r\n      if (\r\n        canMoveOrAttack(\r\n          playerType,\r\n          this.clickedChar.position,\r\n          index,\r\n          this.fieldSize,\r\n          'move',\r\n        )\r\n      ) {\r\n        this.gamePlay.selectCell(index, 'green');\r\n        this.gamePlay.setCursor('pointer');\r\n      } else {\r\n        this.gamePlay.setCursor('not-allowed');\r\n      }\r\n    }\r\n\r\n    // Если есть кликнутый персонаж при наведении им на врага,\r\n    // проверяем может ли его атаковать, если да, то подсвечиваем красным кругом\r\n    if (this.clickedChar && cellWithChar) {\r\n      const isPlayerChar = this.checkPlayerChar(this.enteredChar);\r\n      if (isPlayerChar) return;\r\n\r\n      const attackerType = this.clickedChar.character.type;\r\n      if (\r\n        canMoveOrAttack(\r\n          attackerType,\r\n          this.clickedChar.position,\r\n          index,\r\n          this.fieldSize,\r\n          'attack',\r\n        )\r\n      ) {\r\n        this.gamePlay.selectCell(index, 'red');\r\n        this.gamePlay.setCursor('crosshair');\r\n      } else {\r\n        this.gamePlay.setCursor('not-allowed');\r\n      }\r\n    }\r\n  }\r\n\r\n  onCellLeave(index) {\r\n    if (this.gameOver) return;\r\n    this.gamePlay.hideCellTooltip(index);\r\n\r\n    if (!this.gamePlay.cells[index].classList.contains('selected-yellow')) {\r\n      this.gamePlay.deselectCell(index);\r\n    }\r\n  }\r\n\r\n  settingsDef() {\r\n    this.activeChar = null;\r\n    this.activeIndex = null;\r\n    this.clickedChar = null;\r\n    this.enteredCell = null;\r\n    this.gamePlay.cells.forEach((cell, i) => this.gamePlay.deselectCell(i));\r\n  }\r\n\r\n  finishGame() {\r\n    this.gameOver = true; // Устанавливаем флаг завершения игры\r\n    this.settingsDef();\r\n    this.gamePlay.setCursor('default');\r\n    this.gamePlay.redrawPositions(this.allChars);\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  winOrOver(winOrOver) {\r\n    if (winOrOver === 'победа') {\r\n      setTimeout(() => {\r\n        GamePlay.showMessage('Вы выиграли!');\r\n      }, 100);\r\n    } else {\r\n      setTimeout(() => {\r\n        GamePlay.showMessage('Вы проиграли!');\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  // Начинаем новую игру\r\n  newGame() {\r\n    this.gameOver = false;\r\n    this.settingsDef();\r\n    this.init();\r\n  }\r\n\r\n  saveGame() {\r\n    this.stateService.save(this.gameState);\r\n    GamePlay.showMessage('Игра сохранена');\r\n  }\r\n\r\n  loadGame() {\r\n    const data = this.stateService.load();\r\n    if (!data) {\r\n      GamePlay.showMessage('Нет сохраненных игр');\r\n      return;\r\n    }\r\n    this.gameState = GameState.from(data);\r\n    console.log('loadGame.gameState ===>', this.gameState);\r\n    this.allChars = [...this.gameState.positionsUser, ...this.gameState.positionsBot];\r\n\r\n    this.playerTeam = this.gameState.userTeam;\r\n    this.enemyTeam = this.gameState.botTeam;\r\n    this.positionedEnemyTeam = this.gameState.positionsBot;\r\n    this.positionedPlayerTeam = this.gameState.positionsUser;\r\n    // Обновляем отображение персонажей\r\n    this.level = this.gameState.level;\r\n    this.theme = this.gameState.theme;\r\n    this.gamePlay.drawUi(this.theme);\r\n    this.gamePlay.redrawPositions(this.allChars);\r\n    this.gamePlay.setCursor('default');\r\n  }\r\n}\r\n"],"names":["calcTileType","index","boardSize","firstRow","lastRow","leftColumn","rightColumn","positions","top","bottom","left","right","position","GamePlay","constructor","this","container","boardEl","cells","cellClickListeners","cellEnterListeners","cellLeaveListeners","newGameListeners","saveGameListeners","loadGameListeners","bindToDOM","HTMLElement","Error","drawUi","theme","checkBinding","innerHTML","newGameEl","querySelector","saveGameEl","loadGameEl","addEventListener","event","onNewGameClick","onSaveGameClick","onLoadGameClick","classList","add","i","cellEl","document","createElement","onCellEnter","onCellLeave","onCellClick","appendChild","Array","from","children","redrawPositions","cell","charEl","character","type","healthEl","healthIndicatorEl","health","style","width","addCellEnterListener","callback","push","addCellLeaveListener","addCellClickListener","addNewGameListener","addSaveGameListener","addLoadGameListener","preventDefault","indexOf","currentTarget","forEach","o","call","showError","message","alert","showMessage","selectCell","color","deselectCell","remove","filter","startsWith","showCellTooltip","title","hideCellTooltip","showDamage","damage","Promise","resolve","damageEl","textContent","removeChild","setCursor","cursor","Character","level","attack","defence","name","PositionedCharacter","Bowman","super","Swordsman","Magician","Vampire","Daemon","Undead","Team","characters","addCharacter","GameState","data","types","swordsman","bowman","magician","daemon","undead","vampire","createCharacter","characterData","CharacterClass","userTeam","positionsUser","map","positionCharacter","isArray","botTeam","positionsBot","gameState","isPlayer","generateTeam","allowedTypes","maxLevel","characterCount","generTeam","randomLevel","Math","ceil","random","char","floor","length","characterGenerator","team","generChar","next","value","canMoveOrAttack","charType","currentPos","targetPos","fieldSize","actionType","rowDiff","abs","colDiff","maxMovDist","console","log","maxAttackRadius","gamePlay","stateService","storage","save","state","setItem","JSON","stringify","load","parse","getItem","e","localStorage","gameCtrl","gameOver","bind","addEvents","init","themes","playerPositions","generatePositions","enemyPositions","playerTeam","positionedPlayerTeam","createPositionedTeam","enemyTeam","positionedEnemyTeam","allChars","string","positionedTeam","randomIndex","positionedCharacter","splice","newGame","saveGame","loadGame","checkPlayerChar","playerChar","calcDamage","attacker","target","attackerAttack","damageDiff","max","cellWithChar","clickedChar","find","enteredCell","contains","playerStep","playerAttack","isPlayerChar","activeChar","activeIndex","compAct","targetCharacter","then","levelUp","targetHero","targetEnemy","maxDamage","playerHeroes","hero","enemy","playerHero","playerHeroCharacter","enemyAttack","moveRandomEnemy","finishGame","winOrOver","randomEnemy","nearestHero","findNearestHero","availableCells","occupiedCells","unoccupiedCells","includes","minDistance","Infinity","nearestCell","distance","calculateDistance","pos1","pos2","row1","col1","row2","col2","createMessage","min","settingsDef","enteredChar","setTimeout"],"sourceRoot":""}